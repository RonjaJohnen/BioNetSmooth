% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NetSmooth.R
\name{network_smoothing}
\alias{network_smoothing}
\title{function for identifing active genes and their neighbours through propagating expression scores on an interaction network}
\usage{
network_smoothing(net, mat_intensities, conditions, iter = 1, alpha,
  network_type = "laplacian", stop_val = 0)
}
\arguments{
\item{net}{igraph object respresenting the laplacian matrix (degree normalized adjacency matrix) of graph generated from protein interaction list. It is a symmetric matrix with equal number of rows and columns which is equal to the number of nodes in graph. "G" object from network_mapping output list.}

\item{mat_intensities}{matrix of mapped initial scores (gene expression values of each condition) corresponding to nodes in graph "G".}

\item{conditions}{character vector representing the sample names. This will used as column names of smooth matrix (output from this function).}

\item{iter}{an integer indicating number of runs of propagation of initial scores on network. At iter "t" every node propagates the scores received in the t-1 iteration to its neighbors. The node scores will get converged over the progression of iterations. The converged smooth matrix is found by taking the norm of smooth mat at t subtracted with smooth mat at t-1, the norm is exprected to be a very small value (in the ranges of 10^-6).}

\item{alpha}{ranging between 0 and 1, the fraction of intial scores that has to be diffused to the adjacent nodes. This is a tunable parameter. If 0.5 then 50 percent of intial score of the nodes will be spread to its neighbours, if it is 1 then 100 percent of initial scores will be spread to the adjacent nodes (complete loss of initial information).}

\item{network_type}{string specifying the type of graph that is created from the protein interaction list. By default: "laplacian".}

\item{stop_val}{if specified the scores are propagated in the network till the norm of smooth mat at t subtracted with smooth mat at t-1 reaches this value. By default:0, therefore it returns a matrix of smooth scores at the specified iteration.}
}
\value{
a matrix of propagated node scores at the specified alpha and iterations.
}
\description{
Using the propagate algebra function initial gene expression scores are spread on the network for every given condition. This propagation function will
}
\examples{
# To propagate the scores on the network with 20 runs and alpha of 0.5
# netmap is a list generated from the network_mapping function
netmap$smoothmat <- network_smoothing(net = netmap$G, mat_intensities = netmap$mat_intensities, conditions = colnames (netmap$mat_intensities), iter = 20, alpha = 0.5, network_type = "laplacian")

# To generate propagated scores at 1-30 continuous iterations with alpha of 0.5
netmap$SmoothMats<- lapply (1:30, function (x) network_smoothing(net = netmap$G, mat_intensities = netmap$mat_intensities, conditions = colnames (netmap$mat_intensities), iter = x, alpha = 0.5, network_type="laplacian"))

# To see the difference between the propagated matrices
norm (netmap$SmoothMats[[29]]- netmap$SmoothMats[[30]])

# With this example the smoothed scores on network got converged at 30 iterations, therefore these scores could be used for furthur exploration
netmap$ConvergedSmoothMat <- netmap$SmoothMats[[30]]

}
\references{
Vanunu et al. Associating Genes and Protein Complexes with Disease via Network Propagation. PLoS Comput Biol 2010, 6(1):e1000641.

Hofree et al. Network-based stratification of tumor mutations. Nature Methods 2013, 10,1108â€“1115.

Ruffalo et al. Network-Based Integration of Disparate Omic Data To Identify "Silent Players" in Cancer. PLoS Comput Biol 2015, 11(12): e1004595.
}

