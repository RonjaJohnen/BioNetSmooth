% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NetSmooth.R
\name{network_bias_correction}
\alias{network_bias_correction}
\title{Network propagated scores are corrected by subtracted with mean inital propagated scores.}
\usage{
network_bias_correction(net, mat_intensities, smooth_mat, conditions, alpha,
  iter)
}
\arguments{
\item{net}{igraph object respresenting the laplacian matrix (degree normalized adjacency matrix) of graph generated from protein interaction list. It is a symmetric matrix with equal number of rows and columns which is equal to the number of nodes in graph. "G" object from network_mapping output list.}

\item{mat_intensities}{matrix of mapped initial scores (gene expression values of each condition) corresponding to nodes in graph "G".}

\item{smooth_mat}{matrix of propagated scores for each gene for various conditions (converged smoothed matrix).}

\item{conditions}{character vector representing the sample names. This will used as column names of smooth matrix (output from this function).}

\item{alpha}{ranging between 0 and 1, the fraction of intial scores that has to be diffused to the adjacent nodes. This is a tunable parameter. If 0.5 then 50 percent of intial score of the nodes will be spread to its neighbours, if it is 1 then 100 percent of initial scores will be spread to the adjacent nodes (complete loss of initial information).}

\item{iter}{an integer value where the propagated scores has converged.}
}
\value{
a matrix with network bias corrected propagated scores for each condition.
}
\description{
Network propagation suffers from gene-specific biases created by the connections in the network ('topology bias'). For example, genes with many neighbors will generally tend to accumulate higher scores independent of the gene expression data. Therefore, network topology bias correction on the propagated scores is essential.
}
\examples{
# To correct for gene-sepcific biases on the propagated scores due to network structure
netmap$CorrectedSmoothMat <- network_bias_correction(net = netmap$G, mat_intensities = netmap$mat_intensities, smooth_mat = netmap$ConvergedSmoothMat, conditions = colnames (netmap$mat_intensities),alpha = 0.5, iter = 30)

}

